                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler
                                      3 ; Version 4.5.0 #15242 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module testlcd
                                      6 	
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _timer0_ISR
                                     12 	.globl __mcs51_genXRAMCLEAR
                                     13 	.globl __mcs51_genXINIT
                                     14 	.globl __mcs51_genRAMCLEAR
                                     15 	.globl __sdcc_gsinit_startup
                                     16 	.globl _main
                                     17 	.globl _Consumer
                                     18 	.globl _Producer2
                                     19 	.globl _Producer1
                                     20 	.globl _LCD_ready
                                     21 	.globl _LCD_write_char
                                     22 	.globl _LCD_Init
                                     23 	.globl _AnyKeyPressed
                                     24 	.globl _KeyToChar
                                     25 	.globl _Init_Keypad
                                     26 	.globl _ButtonToChar
                                     27 	.globl _AnyButtonPressed
                                     28 	.globl _ThreadCreate
                                     29 	.globl _CY
                                     30 	.globl _AC
                                     31 	.globl _F0
                                     32 	.globl _RS1
                                     33 	.globl _RS0
                                     34 	.globl _OV
                                     35 	.globl _F1
                                     36 	.globl _P
                                     37 	.globl _PS
                                     38 	.globl _PT1
                                     39 	.globl _PX1
                                     40 	.globl _PT0
                                     41 	.globl _PX0
                                     42 	.globl _RD
                                     43 	.globl _WR
                                     44 	.globl _T1
                                     45 	.globl _T0
                                     46 	.globl _INT1
                                     47 	.globl _INT0
                                     48 	.globl _TXD
                                     49 	.globl _RXD
                                     50 	.globl _P3_7
                                     51 	.globl _P3_6
                                     52 	.globl _P3_5
                                     53 	.globl _P3_4
                                     54 	.globl _P3_3
                                     55 	.globl _P3_2
                                     56 	.globl _P3_1
                                     57 	.globl _P3_0
                                     58 	.globl _EA
                                     59 	.globl _ES
                                     60 	.globl _ET1
                                     61 	.globl _EX1
                                     62 	.globl _ET0
                                     63 	.globl _EX0
                                     64 	.globl _P2_7
                                     65 	.globl _P2_6
                                     66 	.globl _P2_5
                                     67 	.globl _P2_4
                                     68 	.globl _P2_3
                                     69 	.globl _P2_2
                                     70 	.globl _P2_1
                                     71 	.globl _P2_0
                                     72 	.globl _SM0
                                     73 	.globl _SM1
                                     74 	.globl _SM2
                                     75 	.globl _REN
                                     76 	.globl _TB8
                                     77 	.globl _RB8
                                     78 	.globl _TI
                                     79 	.globl _RI
                                     80 	.globl _P1_7
                                     81 	.globl _P1_6
                                     82 	.globl _P1_5
                                     83 	.globl _P1_4
                                     84 	.globl _P1_3
                                     85 	.globl _P1_2
                                     86 	.globl _P1_1
                                     87 	.globl _P1_0
                                     88 	.globl _TF1
                                     89 	.globl _TR1
                                     90 	.globl _TF0
                                     91 	.globl _TR0
                                     92 	.globl _IE1
                                     93 	.globl _IT1
                                     94 	.globl _IE0
                                     95 	.globl _IT0
                                     96 	.globl _P0_7
                                     97 	.globl _P0_6
                                     98 	.globl _P0_5
                                     99 	.globl _P0_4
                                    100 	.globl _P0_3
                                    101 	.globl _P0_2
                                    102 	.globl _P0_1
                                    103 	.globl _P0_0
                                    104 	.globl _B
                                    105 	.globl _ACC
                                    106 	.globl _PSW
                                    107 	.globl _IP
                                    108 	.globl _P3
                                    109 	.globl _IE
                                    110 	.globl _P2
                                    111 	.globl _SBUF
                                    112 	.globl _SCON
                                    113 	.globl _P1
                                    114 	.globl _TH1
                                    115 	.globl _TH0
                                    116 	.globl _TL1
                                    117 	.globl _TL0
                                    118 	.globl _TMOD
                                    119 	.globl _TCON
                                    120 	.globl _PCON
                                    121 	.globl _DPH
                                    122 	.globl _DPL
                                    123 	.globl _SP
                                    124 	.globl _P0
                                    125 	.globl _dir
                                    126 	.globl _output_char
                                    127 	.globl _bounded_buffer
                                    128 	.globl _key_in
                                    129 	.globl _button_in
                                    130 	.globl _write
                                    131 	.globl _read
                                    132 	.globl _empty
                                    133 	.globl _full
                                    134 	.globl _mutex
                                    135 ;--------------------------------------------------------
                                    136 ; special function registers
                                    137 ;--------------------------------------------------------
                                    138 	.area RSEG    (ABS,DATA)
      000000                        139 	.org 0x0000
                           000080   140 _P0	=	0x0080
                           000081   141 _SP	=	0x0081
                           000082   142 _DPL	=	0x0082
                           000083   143 _DPH	=	0x0083
                           000087   144 _PCON	=	0x0087
                           000088   145 _TCON	=	0x0088
                           000089   146 _TMOD	=	0x0089
                           00008A   147 _TL0	=	0x008a
                           00008B   148 _TL1	=	0x008b
                           00008C   149 _TH0	=	0x008c
                           00008D   150 _TH1	=	0x008d
                           000090   151 _P1	=	0x0090
                           000098   152 _SCON	=	0x0098
                           000099   153 _SBUF	=	0x0099
                           0000A0   154 _P2	=	0x00a0
                           0000A8   155 _IE	=	0x00a8
                           0000B0   156 _P3	=	0x00b0
                           0000B8   157 _IP	=	0x00b8
                           0000D0   158 _PSW	=	0x00d0
                           0000E0   159 _ACC	=	0x00e0
                           0000F0   160 _B	=	0x00f0
                                    161 ;--------------------------------------------------------
                                    162 ; special function bits
                                    163 ;--------------------------------------------------------
                                    164 	.area RSEG    (ABS,DATA)
      000000                        165 	.org 0x0000
                           000080   166 _P0_0	=	0x0080
                           000081   167 _P0_1	=	0x0081
                           000082   168 _P0_2	=	0x0082
                           000083   169 _P0_3	=	0x0083
                           000084   170 _P0_4	=	0x0084
                           000085   171 _P0_5	=	0x0085
                           000086   172 _P0_6	=	0x0086
                           000087   173 _P0_7	=	0x0087
                           000088   174 _IT0	=	0x0088
                           000089   175 _IE0	=	0x0089
                           00008A   176 _IT1	=	0x008a
                           00008B   177 _IE1	=	0x008b
                           00008C   178 _TR0	=	0x008c
                           00008D   179 _TF0	=	0x008d
                           00008E   180 _TR1	=	0x008e
                           00008F   181 _TF1	=	0x008f
                           000090   182 _P1_0	=	0x0090
                           000091   183 _P1_1	=	0x0091
                           000092   184 _P1_2	=	0x0092
                           000093   185 _P1_3	=	0x0093
                           000094   186 _P1_4	=	0x0094
                           000095   187 _P1_5	=	0x0095
                           000096   188 _P1_6	=	0x0096
                           000097   189 _P1_7	=	0x0097
                           000098   190 _RI	=	0x0098
                           000099   191 _TI	=	0x0099
                           00009A   192 _RB8	=	0x009a
                           00009B   193 _TB8	=	0x009b
                           00009C   194 _REN	=	0x009c
                           00009D   195 _SM2	=	0x009d
                           00009E   196 _SM1	=	0x009e
                           00009F   197 _SM0	=	0x009f
                           0000A0   198 _P2_0	=	0x00a0
                           0000A1   199 _P2_1	=	0x00a1
                           0000A2   200 _P2_2	=	0x00a2
                           0000A3   201 _P2_3	=	0x00a3
                           0000A4   202 _P2_4	=	0x00a4
                           0000A5   203 _P2_5	=	0x00a5
                           0000A6   204 _P2_6	=	0x00a6
                           0000A7   205 _P2_7	=	0x00a7
                           0000A8   206 _EX0	=	0x00a8
                           0000A9   207 _ET0	=	0x00a9
                           0000AA   208 _EX1	=	0x00aa
                           0000AB   209 _ET1	=	0x00ab
                           0000AC   210 _ES	=	0x00ac
                           0000AF   211 _EA	=	0x00af
                           0000B0   212 _P3_0	=	0x00b0
                           0000B1   213 _P3_1	=	0x00b1
                           0000B2   214 _P3_2	=	0x00b2
                           0000B3   215 _P3_3	=	0x00b3
                           0000B4   216 _P3_4	=	0x00b4
                           0000B5   217 _P3_5	=	0x00b5
                           0000B6   218 _P3_6	=	0x00b6
                           0000B7   219 _P3_7	=	0x00b7
                           0000B0   220 _RXD	=	0x00b0
                           0000B1   221 _TXD	=	0x00b1
                           0000B2   222 _INT0	=	0x00b2
                           0000B3   223 _INT1	=	0x00b3
                           0000B4   224 _T0	=	0x00b4
                           0000B5   225 _T1	=	0x00b5
                           0000B6   226 _WR	=	0x00b6
                           0000B7   227 _RD	=	0x00b7
                           0000B8   228 _PX0	=	0x00b8
                           0000B9   229 _PT0	=	0x00b9
                           0000BA   230 _PX1	=	0x00ba
                           0000BB   231 _PT1	=	0x00bb
                           0000BC   232 _PS	=	0x00bc
                           0000D0   233 _P	=	0x00d0
                           0000D1   234 _F1	=	0x00d1
                           0000D2   235 _OV	=	0x00d2
                           0000D3   236 _RS0	=	0x00d3
                           0000D4   237 _RS1	=	0x00d4
                           0000D5   238 _F0	=	0x00d5
                           0000D6   239 _AC	=	0x00d6
                           0000D7   240 _CY	=	0x00d7
                                    241 ;--------------------------------------------------------
                                    242 ; overlayable register banks
                                    243 ;--------------------------------------------------------
                                    244 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        245 	.ds 8
                                    246 ;--------------------------------------------------------
                                    247 ; internal ram data
                                    248 ;--------------------------------------------------------
                                    249 	.area DSEG    (DATA)
                           000020   250 _mutex	=	0x0020
                           000021   251 _full	=	0x0021
                           000022   252 _empty	=	0x0022
                           000023   253 _read	=	0x0023
                           000024   254 _write	=	0x0024
                           000025   255 _button_in	=	0x0025
                           000026   256 _key_in	=	0x0026
                           000027   257 _bounded_buffer	=	0x0027
                           00002B   258 _output_char	=	0x002b
                           000038   259 _dir	=	0x0038
                                    260 ;--------------------------------------------------------
                                    261 ; overlayable items in internal ram
                                    262 ;--------------------------------------------------------
                                    263 ;--------------------------------------------------------
                                    264 ; Stack segment in internal ram
                                    265 ;--------------------------------------------------------
                                    266 	.area SSEG
      000000                        267 __start__stack:
      000000                        268 	.ds	1
                                    269 
                                    270 ;--------------------------------------------------------
                                    271 ; indirectly addressable internal ram data
                                    272 ;--------------------------------------------------------
                                    273 	.area ISEG    (DATA)
                                    274 ;--------------------------------------------------------
                                    275 ; absolute internal ram data
                                    276 ;--------------------------------------------------------
                                    277 	.area IABS    (ABS,DATA)
                                    278 	.area IABS    (ABS,DATA)
                                    279 ;--------------------------------------------------------
                                    280 ; bit data
                                    281 ;--------------------------------------------------------
                                    282 	.area BSEG    (BIT)
                                    283 ;--------------------------------------------------------
                                    284 ; paged external ram data
                                    285 ;--------------------------------------------------------
                                    286 	.area PSEG    (PAG,XDATA)
                                    287 ;--------------------------------------------------------
                                    288 ; uninitialized external ram data
                                    289 ;--------------------------------------------------------
                                    290 	.area XSEG    (XDATA)
                                    291 ;--------------------------------------------------------
                                    292 ; absolute external ram data
                                    293 ;--------------------------------------------------------
                                    294 	.area XABS    (ABS,XDATA)
                                    295 ;--------------------------------------------------------
                                    296 ; initialized external ram data
                                    297 ;--------------------------------------------------------
                                    298 	.area XISEG   (XDATA)
                                    299 	.area HOME    (CODE)
                                    300 	.area GSINIT0 (CODE)
                                    301 	.area GSINIT1 (CODE)
                                    302 	.area GSINIT2 (CODE)
                                    303 	.area GSINIT3 (CODE)
                                    304 	.area GSINIT4 (CODE)
                                    305 	.area GSINIT5 (CODE)
                                    306 	.area GSINIT  (CODE)
                                    307 	.area GSFINAL (CODE)
                                    308 	.area CSEG    (CODE)
                                    309 ;--------------------------------------------------------
                                    310 ; interrupt vector
                                    311 ;--------------------------------------------------------
                                    312 	.area HOME    (CODE)
      000000                        313 __interrupt_vect:
      000000 02r00rE2         [24]  314 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  315 	reti
      000004                        316 	.ds	7
      00000B 02r00rE9         [24]  317 	ljmp	_timer0_ISR
                                    318 ; restartable atomic support routines
      00000E                        319 	.ds	2
      000010                        320 sdcc_atomic_exchange_rollback_start::
      000010 00               [12]  321 	nop
      000011 00               [12]  322 	nop
      000012                        323 sdcc_atomic_exchange_pdata_impl:
      000012 E2               [24]  324 	movx	a, @r0
      000013 FB               [12]  325 	mov	r3, a
      000014 EA               [12]  326 	mov	a, r2
      000015 F2               [24]  327 	movx	@r0, a
      000016 80 2C            [24]  328 	sjmp	sdcc_atomic_exchange_exit
      000018 00               [12]  329 	nop
      000019 00               [12]  330 	nop
      00001A                        331 sdcc_atomic_exchange_xdata_impl:
      00001A E0               [24]  332 	movx	a, @dptr
      00001B FB               [12]  333 	mov	r3, a
      00001C EA               [12]  334 	mov	a, r2
      00001D F0               [24]  335 	movx	@dptr, a
      00001E 80 24            [24]  336 	sjmp	sdcc_atomic_exchange_exit
      000020                        337 sdcc_atomic_compare_exchange_idata_impl:
      000020 E6               [12]  338 	mov	a, @r0
      000021 B5 02 02         [24]  339 	cjne	a, ar2, .+#5
      000024 EB               [12]  340 	mov	a, r3
      000025 F6               [12]  341 	mov	@r0, a
      000026 22               [24]  342 	ret
      000027 00               [12]  343 	nop
      000028                        344 sdcc_atomic_compare_exchange_pdata_impl:
      000028 E2               [24]  345 	movx	a, @r0
      000029 B5 02 02         [24]  346 	cjne	a, ar2, .+#5
      00002C EB               [12]  347 	mov	a, r3
      00002D F2               [24]  348 	movx	@r0, a
      00002E 22               [24]  349 	ret
      00002F 00               [12]  350 	nop
      000030                        351 sdcc_atomic_compare_exchange_xdata_impl:
      000030 E0               [24]  352 	movx	a, @dptr
      000031 B5 02 02         [24]  353 	cjne	a, ar2, .+#5
      000034 EB               [12]  354 	mov	a, r3
      000035 F0               [24]  355 	movx	@dptr, a
      000036 22               [24]  356 	ret
      000037                        357 sdcc_atomic_exchange_rollback_end::
                                    358 
      000037                        359 sdcc_atomic_exchange_gptr_impl::
      000037 30 F6 E0         [24]  360 	jnb	b.6, sdcc_atomic_exchange_xdata_impl
      00003A A8 82            [24]  361 	mov	r0, dpl
      00003C 20 F5 D3         [24]  362 	jb	b.5, sdcc_atomic_exchange_pdata_impl
      00003F                        363 sdcc_atomic_exchange_idata_impl:
      00003F EA               [12]  364 	mov	a, r2
      000040 C6               [12]  365 	xch	a, @r0
      000041 F5 82            [12]  366 	mov	dpl, a
      000043 22               [24]  367 	ret
      000044                        368 sdcc_atomic_exchange_exit:
      000044 8B 82            [24]  369 	mov	dpl, r3
      000046 22               [24]  370 	ret
      000047                        371 sdcc_atomic_compare_exchange_gptr_impl::
      000047 30 F6 E6         [24]  372 	jnb	b.6, sdcc_atomic_compare_exchange_xdata_impl
      00004A A8 82            [24]  373 	mov	r0, dpl
      00004C 20 F5 D9         [24]  374 	jb	b.5, sdcc_atomic_compare_exchange_pdata_impl
      00004F 80 CF            [24]  375 	sjmp	sdcc_atomic_compare_exchange_idata_impl
                                    376 ;--------------------------------------------------------
                                    377 ; global & static initialisations
                                    378 ;--------------------------------------------------------
                                    379 	.area HOME    (CODE)
                                    380 	.area GSINIT  (CODE)
                                    381 	.area GSFINAL (CODE)
                                    382 	.area GSINIT  (CODE)
                                    383 	.globl __sdcc_gsinit_startup
                                    384 	.globl __sdcc_program_startup
                                    385 	.globl __start__stack
                                    386 	.globl __mcs51_genXINIT
                                    387 	.globl __mcs51_genXRAMCLEAR
                                    388 	.globl __mcs51_genRAMCLEAR
                                    389 	.area GSFINAL (CODE)
      000000 02r00r51         [24]  390 	ljmp	__sdcc_program_startup
                                    391 ;--------------------------------------------------------
                                    392 ; Home
                                    393 ;--------------------------------------------------------
                                    394 	.area HOME    (CODE)
                                    395 	.area HOME    (CODE)
      000051                        396 __sdcc_program_startup:
      000051 02r00rBB         [24]  397 	ljmp	_main
                                    398 ;	return from main will return to caller
                                    399 ;--------------------------------------------------------
                                    400 ; code
                                    401 ;--------------------------------------------------------
                                    402 	.area CSEG    (CODE)
                                    403 ;------------------------------------------------------------
                                    404 ;Allocation info for local variables in function 'Producer1'
                                    405 ;------------------------------------------------------------
                                    406 ;	testlcd.c:18: void Producer1(void)
                                    407 ;	-----------------------------------------
                                    408 ;	 function Producer1
                                    409 ;	-----------------------------------------
      000000                        410 _Producer1:
                           000007   411 	ar7 = 0x07
                           000006   412 	ar6 = 0x06
                           000005   413 	ar5 = 0x05
                           000004   414 	ar4 = 0x04
                           000003   415 	ar3 = 0x03
                           000002   416 	ar2 = 0x02
                           000001   417 	ar1 = 0x01
                           000000   418 	ar0 = 0x00
                                    419 ;	testlcd.c:20: button_in = 0;
      000000 75 25 00         [24]  420 	mov	_button_in,#0x00
                                    421 ;	testlcd.c:22: while(AnyButtonPressed() == 0);
      000003                        422 00101$:
      000003 12r00r00         [24]  423 	lcall	_AnyButtonPressed
      000006 E5 82            [12]  424 	mov	a, dpl
      000008 60 F9            [24]  425 	jz	00101$
                                    426 ;	testlcd.c:23: EA = 0;
                                    427 ;	assignBit
      00000A C2 AF            [12]  428 	clr	_EA
                                    429 ;	testlcd.c:24: button_in = ButtonToChar();
      00000C 12r00r00         [24]  430 	lcall	_ButtonToChar
      00000F 85 82 25         [24]  431 	mov	_button_in,dpl
                                    432 ;	testlcd.c:25: EA = 1;
                                    433 ;	assignBit
      000012 D2 AF            [12]  434 	setb	_EA
                                    435 ;	testlcd.c:27: SemaphoreWait(empty);
      000014                        436 0$:
      000014 E5 22            [12]  437 	MOV A, _empty 
      000016 60 FC            [24]  438 	JZ 0$ 
      000018 15 22            [12]  439 	DEC _empty 
                                    440 ;	testlcd.c:28: SemaphoreWait(mutex);
      00001A                        441 1$:
      00001A E5 20            [12]  442 	MOV A, _mutex 
      00001C 60 FC            [24]  443 	JZ 1$ 
      00001E 15 20            [12]  444 	DEC _mutex 
                                    445 ;	testlcd.c:30: bounded_buffer[write] = button_in;
      000020 E5 24            [12]  446 	mov	a,_write
      000022 24 27            [12]  447 	add	a, #_bounded_buffer
      000024 F8               [12]  448 	mov	r0,a
      000025 A6 25            [24]  449 	mov	@r0,_button_in
                                    450 ;	testlcd.c:31: if (write == 2) write = 0;
      000027 74 02            [12]  451 	mov	a,#0x02
      000029 B5 24 05         [24]  452 	cjne	a,_write,00105$
      00002C 75 24 00         [24]  453 	mov	_write,#0x00
      00002F 80 05            [24]  454 	sjmp	00106$
      000031                        455 00105$:
                                    456 ;	testlcd.c:32: else write++;
      000031 E5 24            [12]  457 	mov	a,_write
      000033 04               [12]  458 	inc	a
      000034 F5 24            [12]  459 	mov	_write,a
      000036                        460 00106$:
                                    461 ;	testlcd.c:34: SemaphoreSignal(mutex);
      000036 05 20            [12]  462 	INC _mutex 
                                    463 ;	testlcd.c:35: SemaphoreSignal(full);
      000038 05 21            [12]  464 	INC _full 
                                    465 ;	testlcd.c:36: while (AnyButtonPressed());
      00003A                        466 00107$:
      00003A 12r00r00         [24]  467 	lcall	_AnyButtonPressed
      00003D E5 82            [12]  468 	mov	a, dpl
      00003F 60 C2            [24]  469 	jz	00101$
                                    470 ;	testlcd.c:38: }
      000041 80 F7            [24]  471 	sjmp	00107$
                                    472 ;------------------------------------------------------------
                                    473 ;Allocation info for local variables in function 'Producer2'
                                    474 ;------------------------------------------------------------
                                    475 ;	testlcd.c:40: void Producer2(void)
                                    476 ;	-----------------------------------------
                                    477 ;	 function Producer2
                                    478 ;	-----------------------------------------
      000043                        479 _Producer2:
                                    480 ;	testlcd.c:42: key_in = 0;
      000043 75 26 00         [24]  481 	mov	_key_in,#0x00
                                    482 ;	testlcd.c:45: while (AnyKeyPressed() == 0);
      000046                        483 00101$:
      000046 12r00r00         [24]  484 	lcall	_AnyKeyPressed
      000049 E5 82            [12]  485 	mov	a, dpl
      00004B 60 F9            [24]  486 	jz	00101$
                                    487 ;	testlcd.c:46: EA = 0;
                                    488 ;	assignBit
      00004D C2 AF            [12]  489 	clr	_EA
                                    490 ;	testlcd.c:47: key_in = KeyToChar();
      00004F 12r00r00         [24]  491 	lcall	_KeyToChar
      000052 85 82 26         [24]  492 	mov	_key_in,dpl
                                    493 ;	testlcd.c:48: EA = 1;
                                    494 ;	assignBit
      000055 D2 AF            [12]  495 	setb	_EA
                                    496 ;	testlcd.c:50: SemaphoreWait(empty);
      000057                        497 2$:
      000057 E5 22            [12]  498 	MOV A, _empty 
      000059 60 FC            [24]  499 	JZ 2$ 
      00005B 15 22            [12]  500 	DEC _empty 
                                    501 ;	testlcd.c:51: SemaphoreWait(mutex);
      00005D                        502 3$:
      00005D E5 20            [12]  503 	MOV A, _mutex 
      00005F 60 FC            [24]  504 	JZ 3$ 
      000061 15 20            [12]  505 	DEC _mutex 
                                    506 ;	testlcd.c:53: bounded_buffer[write] = key_in;
      000063 E5 24            [12]  507 	mov	a,_write
      000065 24 27            [12]  508 	add	a, #_bounded_buffer
      000067 F8               [12]  509 	mov	r0,a
      000068 A6 26            [24]  510 	mov	@r0,_key_in
                                    511 ;	testlcd.c:54: if (write == 2) write = 0;
      00006A 74 02            [12]  512 	mov	a,#0x02
      00006C B5 24 05         [24]  513 	cjne	a,_write,00105$
      00006F 75 24 00         [24]  514 	mov	_write,#0x00
      000072 80 05            [24]  515 	sjmp	00106$
      000074                        516 00105$:
                                    517 ;	testlcd.c:55: else write++;
      000074 E5 24            [12]  518 	mov	a,_write
      000076 04               [12]  519 	inc	a
      000077 F5 24            [12]  520 	mov	_write,a
      000079                        521 00106$:
                                    522 ;	testlcd.c:57: SemaphoreSignal(mutex);
      000079 05 20            [12]  523 	INC _mutex 
                                    524 ;	testlcd.c:58: SemaphoreSignal(full);
      00007B 05 21            [12]  525 	INC _full 
                                    526 ;	testlcd.c:59: while (AnyKeyPressed());
      00007D                        527 00107$:
      00007D 12r00r00         [24]  528 	lcall	_AnyKeyPressed
      000080 E5 82            [12]  529 	mov	a, dpl
      000082 60 C2            [24]  530 	jz	00101$
                                    531 ;	testlcd.c:61: }
      000084 80 F7            [24]  532 	sjmp	00107$
                                    533 ;------------------------------------------------------------
                                    534 ;Allocation info for local variables in function 'Consumer'
                                    535 ;------------------------------------------------------------
                                    536 ;	testlcd.c:63: void Consumer(void)
                                    537 ;	-----------------------------------------
                                    538 ;	 function Consumer
                                    539 ;	-----------------------------------------
      000086                        540 _Consumer:
                                    541 ;	testlcd.c:65: while (1)
      000086                        542 00108$:
                                    543 ;	testlcd.c:67: SemaphoreWait(full);
      000086                        544 4$:
      000086 E5 21            [12]  545 	MOV A, _full 
      000088 60 FC            [24]  546 	JZ 4$ 
      00008A 15 21            [12]  547 	DEC _full 
                                    548 ;	testlcd.c:68: SemaphoreWait(mutex);
      00008C                        549 5$:
      00008C E5 20            [12]  550 	MOV A, _mutex 
      00008E 60 FC            [24]  551 	JZ 5$ 
      000090 15 20            [12]  552 	DEC _mutex 
                                    553 ;	testlcd.c:70: output_char = bounded_buffer[read];
      000092 E5 23            [12]  554 	mov	a,_read
      000094 24 27            [12]  555 	add	a, #_bounded_buffer
      000096 F9               [12]  556 	mov	r1,a
      000097 87 2B            [24]  557 	mov	_output_char,@r1
                                    558 ;	testlcd.c:72: SemaphoreSignal(mutex);
      000099 05 20            [12]  559 	INC _mutex 
                                    560 ;	testlcd.c:73: SemaphoreSignal(empty);
      00009B 05 22            [12]  561 	INC _empty 
                                    562 ;	testlcd.c:75: if (read == 2) read = 0;
      00009D 74 02            [12]  563 	mov	a,#0x02
      00009F B5 23 05         [24]  564 	cjne	a,_read,00102$
      0000A2 75 23 00         [24]  565 	mov	_read,#0x00
      0000A5 80 05            [24]  566 	sjmp	00103$
      0000A7                        567 00102$:
                                    568 ;	testlcd.c:76: else read++;
      0000A7 E5 23            [12]  569 	mov	a,_read
      0000A9 04               [12]  570 	inc	a
      0000AA F5 23            [12]  571 	mov	_read,a
      0000AC                        572 00103$:
                                    573 ;	testlcd.c:78: LCD_write_char(output_char);
      0000AC 85 2B 82         [24]  574 	mov	dpl, _output_char
      0000AF 12r00r00         [24]  575 	lcall	_LCD_write_char
                                    576 ;	testlcd.c:79: while (LCD_ready() == 0);
      0000B2                        577 00104$:
      0000B2 12r00r00         [24]  578 	lcall	_LCD_ready
      0000B5 E5 82            [12]  579 	mov	a, dpl
      0000B7 70 CD            [24]  580 	jnz	00108$
                                    581 ;	testlcd.c:81: }
      0000B9 80 F7            [24]  582 	sjmp	00104$
                                    583 ;------------------------------------------------------------
                                    584 ;Allocation info for local variables in function 'main'
                                    585 ;------------------------------------------------------------
                                    586 ;	testlcd.c:83: void main(void)
                                    587 ;	-----------------------------------------
                                    588 ;	 function main
                                    589 ;	-----------------------------------------
      0000BB                        590 _main:
                                    591 ;	testlcd.c:85: SemaphoreCreate(mutex, 1);
      0000BB 75 20 01         [24]  592 	mov	_mutex,#0x01
                                    593 ;	testlcd.c:86: SemaphoreCreate(full, 0);
      0000BE 75 21 00         [24]  594 	mov	_full,#0x00
                                    595 ;	testlcd.c:87: SemaphoreCreate(empty, 3);
      0000C1 75 22 03         [24]  596 	mov	_empty,#0x03
                                    597 ;	testlcd.c:88: write = 0;
      0000C4 75 24 00         [24]  598 	mov	_write,#0x00
                                    599 ;	testlcd.c:89: read = 0;
      0000C7 75 23 00         [24]  600 	mov	_read,#0x00
                                    601 ;	testlcd.c:90: dir = 1;
      0000CA 75 38 01         [24]  602 	mov	_dir,#0x01
                                    603 ;	testlcd.c:92: Init_Keypad();
      0000CD 12r00r00         [24]  604 	lcall	_Init_Keypad
                                    605 ;	testlcd.c:93: LCD_Init();
      0000D0 12r00r00         [24]  606 	lcall	_LCD_Init
                                    607 ;	testlcd.c:95: ThreadCreate(Producer1);
      0000D3 90r00r00         [24]  608 	mov	dptr,#_Producer1
      0000D6 12r00r00         [24]  609 	lcall	_ThreadCreate
                                    610 ;	testlcd.c:96: ThreadCreate(Producer2);
      0000D9 90r00r43         [24]  611 	mov	dptr,#_Producer2
      0000DC 12r00r00         [24]  612 	lcall	_ThreadCreate
                                    613 ;	testlcd.c:97: Consumer();
                                    614 ;	testlcd.c:98: }
      0000DF 02r00r86         [24]  615 	ljmp	_Consumer
                                    616 ;------------------------------------------------------------
                                    617 ;Allocation info for local variables in function '_sdcc_gsinit_startup'
                                    618 ;------------------------------------------------------------
                                    619 ;	testlcd.c:100: void _sdcc_gsinit_startup(void) 
                                    620 ;	-----------------------------------------
                                    621 ;	 function _sdcc_gsinit_startup
                                    622 ;	-----------------------------------------
      0000E2                        623 __sdcc_gsinit_startup:
                                    624 ;	testlcd.c:104: __endasm;
      0000E2 02r00r00         [24]  625 	LJMP	_Bootstrap
                                    626 ;	testlcd.c:105: }
      0000E5 22               [24]  627 	ret
                                    628 ;------------------------------------------------------------
                                    629 ;Allocation info for local variables in function '_mcs51_genRAMCLEAR'
                                    630 ;------------------------------------------------------------
                                    631 ;	testlcd.c:107: void _mcs51_genRAMCLEAR(void) {}
                                    632 ;	-----------------------------------------
                                    633 ;	 function _mcs51_genRAMCLEAR
                                    634 ;	-----------------------------------------
      0000E6                        635 __mcs51_genRAMCLEAR:
      0000E6 22               [24]  636 	ret
                                    637 ;------------------------------------------------------------
                                    638 ;Allocation info for local variables in function '_mcs51_genXINIT'
                                    639 ;------------------------------------------------------------
                                    640 ;	testlcd.c:108: void _mcs51_genXINIT(void) {}
                                    641 ;	-----------------------------------------
                                    642 ;	 function _mcs51_genXINIT
                                    643 ;	-----------------------------------------
      0000E7                        644 __mcs51_genXINIT:
      0000E7 22               [24]  645 	ret
                                    646 ;------------------------------------------------------------
                                    647 ;Allocation info for local variables in function '_mcs51_genXRAMCLEAR'
                                    648 ;------------------------------------------------------------
                                    649 ;	testlcd.c:109: void _mcs51_genXRAMCLEAR(void) {}
                                    650 ;	-----------------------------------------
                                    651 ;	 function _mcs51_genXRAMCLEAR
                                    652 ;	-----------------------------------------
      0000E8                        653 __mcs51_genXRAMCLEAR:
      0000E8 22               [24]  654 	ret
                                    655 ;------------------------------------------------------------
                                    656 ;Allocation info for local variables in function 'timer0_ISR'
                                    657 ;------------------------------------------------------------
                                    658 ;	testlcd.c:111: void timer0_ISR(void) __interrupt(1)
                                    659 ;	-----------------------------------------
                                    660 ;	 function timer0_ISR
                                    661 ;	-----------------------------------------
      0000E9                        662 _timer0_ISR:
                                    663 ;	testlcd.c:115: __endasm;
      0000E9 02r00r00         [24]  664 	LJMP	_myTimer0Handler
                                    665 ;	testlcd.c:116: }
      0000EC 02r00r00         [24]  666 	ljmp	sdcc_atomic_maybe_rollback
                                    667 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    668 ;	eliminated unneeded push/pop not_psw
                                    669 ;	eliminated unneeded push/pop dpl
                                    670 ;	eliminated unneeded push/pop dph
                                    671 ;	eliminated unneeded push/pop b
                                    672 ;	eliminated unneeded push/pop acc
                                    673 	.area CSEG    (CODE)
                                    674 	.area CONST   (CODE)
                                    675 	.area XINIT   (CODE)
                                    676 	.area CABS    (ABS,CODE)
